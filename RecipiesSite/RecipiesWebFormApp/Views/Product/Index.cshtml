@using InventoryManagementMVC.Extensions
@using InventoryManagementMVC.Models;
@using RecipiesModelNS;


@model IEnumerable<ProductViewModel>

@(
 Html.Kendo().Grid(Model)
            .Name("ProductViewModelGrid")
            .AddDefaultOptions()
            .DataSource(dataSource => dataSource
                .Ajax()
                .Create("Create", "Product")
                .Read("Read", "Product")
                .Update("Update", "Product")
                .Destroy("Destroy", "Product")
                    ).Events(e => e.DataBound("onDataBound"))
                    .ClientDetailTemplateId("template")

)
<style>
    .UnitsOnOrderPositive {
        background-color: #d1ff9d;
    }

    .NeedsReorder {
        background-color: #f38a62;
    }
</style>

<script>
    function onDataBound(e) {
        var grid = $("#ProductViewModelGrid").data("kendoGrid");
        //var gridData = grid.dataSource.view();
        var gridData = grid.dataSource.data(); // this fixes colours when grouping

        for (var i = 0; i < gridData.length; i++) {
            //get the item uid
            var currentUid = gridData[i].uid;
            //if the record fits the custom condition
            if (gridData[i].UnitsOnOrder > 0) {
                //find the row based on the uid and the custom class
                var currenRow = grid.table.find("tr[data-uid='" + currentUid + "']");
                $(currenRow).addClass("UnitsOnOrderPositive");
            }
            if (gridData[i].UnitsInStock <= gridData[i].ReorderLevel) {
                var currenRow = grid.table.find("tr[data-uid='" + currentUid + "']");
                $(currenRow).addClass("NeedsReorder");
            }
        }
      
        var exportLink = $("#exportToExcelLink");
        debugger;     
        exportLink.click(function (e) {        
        
            alert(grid.table.context.innerHTML);

            $.ajax({
                type: "POST",
                url: "/Download/ExportWithOpenXML",
                contentType: "application/json; charset=utf-8",
                //contentType: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                data: JSON.stringify({               
                    html: grid.table.context.innerHTML               
                }),

                success: function (data) {
                    //e.preventDefault();
                    //debugger;
                    //var binary = data;
                    //var array = [];
                    //for (var i = 0; i < binary.length; i++) {
                    //    array.push(binary.charCodeAt(i));
                    //}
                    //var blobObject = new Blob([new Uint8Array(array)], { type: 'application/vnd.ms-excel' });

                    //var blobObject = new Blob(data, { type: 'application/vnd.ms-excel' });
                    

                    //window.navigator.msSaveBlob(data, 'GridExcelExport.xls');
                    //alert('File save request made using msSaveBlob() - note the single "Save" button below.');

                    //var fileData = ["Before you insult a person, walk a mile in their shoes. That way, when you insult them, you'll be a mile away - and have their shoes."];
                    //blobObject = new Blob(fileData);
                    //window.navigator.msSaveOrOpenBlob(blobObject, 'GridExcelExport.xls');
                    //alert('File save request made using msSaveOrOpenBlob() - note the two "Open" and "Save" buttons below.');

                    //window.location.href = file;
                    //window.location.href = result;
                    //alert("ok: " + result);
                },
                error: function (result) {
                    alert('Oh no: ' + result.responseText);
                },
                async:   false
            });
            //e.preventDefault();
        });

    }
</script>

<script id="template" type="text/kendo-tmpl">
    @(Html.Kendo().TabStrip()
                    .Name("tabStrip_#=ProductId#")
            .SelectedIndex(0)
            .Animation(animation => animation.Open(open => open.Fade(FadeDirection.In).Duration(AnimationDuration.Fast)))
            .Items(items =>
            {
                items.Add().Text("Recipies").Content(@<text>
                    @(Html.Kendo().Grid<RecipeViewModel>()
                                  .Name("Recipies_#=ProductId#")
          .AddReadOnlyOptions(true)
          .DataSource(dataSource => dataSource
              .Ajax()

                                              .Read(read => read.Action("ReadProductRecipies", "Product", new { productId = "#=ProductId#" }))
          )
          .ToClientTemplate()
                    )
                </text>
                );


                items.Add().Text("Inventories").Content(@<text>
                    @(Html.Kendo().Grid<InventoryViewModel>()
                                                    .Name("Inventories#=ProductId#")
                           .AddReadOnlyOptions(true)
                    .DataSource(dataSource => dataSource
                        .Ajax()
                                                                        .Read(read => read.Action("ReadProductInventories", "Product", new { productId = "#=ProductId#" }))

                    )
                    .ToClientTemplate()
                    )
                </text>
                          );

            })
                                                                                                                                                           .ToClientTemplate()
    )
</script>