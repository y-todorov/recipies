@using InventoryManagementMVC.Extensions
@using InventoryManagementMVC.Models;
@using RecipiesModelNS;


@model IEnumerable<ProductViewModel>

@(
 Html.Kendo().Grid(Model)
            .Name("ProductViewModelGrid")
            .AddDefaultOptions()
            .DataSource(dataSource => dataSource
                .Ajax()
                .Create("Create", "Product")
                .Read("Read", "Product")
                .Update("Update", "Product")
                .Destroy("Destroy", "Product")
                ).Events(e => e.DataBound("onDataBound"))
           
)
<style>
    .UnitsOnOrderPositive {
        background-color: #d1ff9d;
    }
    .NeedsReorder {
        background-color: #f38a62;
    }
</style>

<script>
    function onDataBound(e) {
        var grid = $("#ProductViewModelGrid").data("kendoGrid");
        var gridData = grid.dataSource.view();

        for (var i = 0; i < gridData.length; i++) {
            //get the item uid
            var currentUid = gridData[i].uid;
            //if the record fits the custom condition
            if (gridData[i].UnitsOnOrder > 0) {
                //find the row based on the uid and the custom class
                var currenRow = grid.table.find("tr[data-uid='" + currentUid + "']");
                $(currenRow).addClass("UnitsOnOrderPositive");
            }
            if (gridData[i].UnitsInStock <= gridData[i].ReorderLevel) {
                var currenRow = grid.table.find("tr[data-uid='" + currentUid + "']");
                $(currenRow).addClass("NeedsReorder");
            }
        }
    }
</script>